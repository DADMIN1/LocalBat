{
  "url": "https://codingbat.com/prob/p192383",
  "section": "Recursion-1",
  "problem": "count8",
  "title": "count8",
  "prompt": "Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4. Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).",
  "testcases": [
    "count8(8) \u2192 1",
    "count8(818) \u2192 2",
    "count8(8818) \u2192 4"
  ],
  "testcases_extended": [
    "count8(8) \u2192 1",
    "count8(818) \u2192 2",
    "count8(8818) \u2192 4",
    "count8(8088) \u2192 4",
    "count8(123) \u2192 0",
    "count8(81238) \u2192 2",
    "count8(88788) \u2192 6",
    "count8(8234) \u2192 1",
    "count8(2348) \u2192 1",
    "count8(23884) \u2192 3",
    "count8(0) \u2192 0",
    "count8(1818188) \u2192 5",
    "count8(8818181) \u2192 5",
    "count8(1080) \u2192 1",
    "count8(188) \u2192 3",
    "count8(88888) \u2192 9",
    "count8(9898) \u2192 2",
    "count8(78) \u2192 1"
  ],
  "provided_code": "public int count8(int n) {\n  return 0;\n}",
  "difficulty": "324.0"
}